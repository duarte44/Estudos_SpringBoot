package com.project.first.project.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import com.project.first.project.dto.NotasDTO;
import com.project.first.project.entities.Notas;
import com.project.first.project.exceptions.DataIntegrityException;
import com.project.first.project.exceptions.ObjectNotFoundException;
import com.project.first.project.repositories.NotasRepository;

@Service
public class NotasServices {
	
	@Autowired
	private NotasRepository repository;
	Notas notas = new Notas();
	
		
	public Notas find(Integer id) {		
		Optional<Notas> obj = repository.findById(id);
		return obj.orElseThrow(() -> new ObjectNotFoundException(
				"Objeto não encontrado! Id: " + id + ", Tipo: " + Notas.class.getName()));
	}
	
		
	public Notas insert(Notas obj){
		obj.setId(null);
		return repository.save(obj);
	}
		
	
	public Notas update(Notas obj) {
		Notas newObj = find(obj.getId());
		updateData(newObj, obj); // atualiza os dados de newObj com base em obj
		return repository.save(newObj);
	}

		
	public void delete(Integer id) {
		find(id);
		try {
			repository.deleteById(id);
		} catch (DataIntegrityViolationException e) {
			throw new DataIntegrityException("Não é possivel excluir uma categoria que tem produtos");
		}
	}
	
	
	public List<Notas> findAll() {
		return repository.findAll();
	}
		
	
	
	public void updateData(Notas newObj, Notas obj) {
		newObj.setPreco(obj.getPreco());	
		   
		 //o newObj que a gente procurou no banco ele foi atualizado com os novos dados obj
		
		
		
	}
	
	public Notas fromDTO(NotasDTO objDto) {
		return new Notas(objDto.getId(), objDto.getPreco(), objDto.getDate());
	}

}
